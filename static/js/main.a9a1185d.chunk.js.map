{"version":3,"sources":["reportWebVitals.js","utils/mask.js","pages/crud-usuarios/index.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","celularMask","value","replace","CrudUsers","useState","users","setUsers","show","setShow","url","handleClose","formik","resetForm","validationSchema","Yup","email","required","name","phone","useFormik","initialValues","id","createdAt","onSubmit","values","setSubmitting","urlMethod","method","axios","data","listUsers","toast","success","catch","erro","console","error","useEffect","fetch","res","json","Container","Row","Col","Table","striped","bordered","hover","className","Button","onClick","variant","map","user","index","setValues","edit","confirmAlert","title","message","buttons","label","delete","Modal","onHide","Header","closeButton","Title","Body","Form","type","Group","controlId","Label","Control","onChange","handleChange","onBlur","handleBlur","touched","errors","placeholder","Footer","handleSubmit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9a1185d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') // substitui qualquer caracter que nao seja numero por nada\r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') // captura 2 grupos de numero o primeiro de 3 e o segundo de 1, apos capturar o primeiro grupo ele adiciona um ponto antes do segundo grupo de numero\r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') // captura 2 numeros seguidos de um traço e não deixa ser digitado mais nada\r\n}\r\n\r\n\r\nexport const cnpjMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') // substitui qualquer caracter que nao seja numero por nada\r\n        .replace(/(\\d{2})(\\d)/, '$1.$2') // captura 2 grupos de numero o primeiro de 3 e o segundo de 1, apos capturar o primeiro grupo ele adiciona um ponto antes do segundo grupo de numero\r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1/$2')\r\n        .replace(/(\\d{4})(\\d)/, '$1-$2') // captura 2 numeros seguidos de um traço e não deixa ser digitado mais nada\r\n        .replace(/(-\\d{2})\\d+?$/, '$1')\r\n}\r\n\r\nexport const cepMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') // substitui qualquer caracter que nao seja numero por nada\r\n        .replace(/(\\d{5})(\\d)/, '$1-$2') // captura 2 grupos de numero o primeiro de 3 e o segundo de 1, apos capturar o primeiro grupo ele adiciona um ponto antes do segundo grupo de numero\r\n        .replace(/(-\\d{3})\\d+?$/, '$1')\r\n}\r\n\r\nexport const celularMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') // substitui qualquer caracter que nao seja numero por nada\r\n        .replace(/(\\d{2})(\\d)/, '($1) $2') // captura 2 grupos de numero o primeiro de 3 e o segundo de 1, apos capturar o primeiro grupo ele adiciona um ponto antes do segundo grupo de numero\r\n        .replace(/(\\d{5})(\\d)/, '$1-$2')\r\n        .replace(/(-\\d{4})\\d+?$/, '$1')\r\n}\r\n\r\nexport const telefoneMask = value => {\r\n    console.log(value)\r\n    return value\r\n        .replace(/\\D/g, '') // substitui qualquer caracter que nao seja numero por nada\r\n        .replace(/(\\d{2})(\\d)/, '($1) $2') // captura 2 grupos de numero o primeiro de 3 e o segundo de 1, apos capturar o primeiro grupo ele adiciona um ponto antes do segundo grupo de numero\r\n        .replace(/(\\d{4})(\\d)/, '$1-$2')\r\n        .replace(/(-\\d{4})\\d+?$/, '$1')\r\n}\r\n\r\nexport const moedarealMask = value => {\r\n\r\n    var moeda = value.replace(/\\D/g, '')\r\n        .replace(/(\\d{1,2})$/, ',$1')\r\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\r\n\r\n    return (moeda !== '' ? moeda : '');\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Container, Row, Col, Table, Button, Modal, Form } from 'react-bootstrap'\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './index.css'\r\nimport axios from 'axios'\r\nimport { celularMask } from '../../utils/mask'\r\n\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\nconst CrudUsers = () => {\r\n    const [users, setUsers] = useState()\r\n    const [show, setShow] = useState(false);\r\n\r\n    const url = 'http://60a053e279c19b00174f0b3f.mockapi.io/v1/users'\r\n\r\n    const handleClose = () => {\r\n        formik.resetForm();\r\n        setShow(false)\r\n    }\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email(\"Informe um email válido\").required(\"Email é obrigatório\"),\r\n        name: Yup.string().required(\"Nome é obrigatório\"),\r\n        phone: Yup.string().required(\"Telefone é obrigatório\"),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: 0,\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            createdAt: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values, { setSubmitting }) => {\r\n            let urlMethod = (values.id === 0 ? url : `${url}/${values.id}`)\r\n            let method = (values.id === 0 ? 'POST' : 'PUT')\r\n\r\n            axios(urlMethod, {\r\n                method: method,\r\n                data: values\r\n            }).then(() => {\r\n                listUsers()\r\n                toast.success((values.id === 0 ? \"Usuário cadastrado\" : \"Usuário atualizado\"));\r\n                setSubmitting(false)\r\n                handleClose();\r\n            }).catch(erro => {\r\n                console.error(erro)\r\n            })\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        listUsers();\r\n    }, [])\r\n\r\n    const listUsers = () => {\r\n        fetch(url, {\r\n            'method': 'GET'\r\n        }).then(res => res.json())\r\n            .then(res => {\r\n                setUsers(res);\r\n            })\r\n    }\r\n\r\n    const edit = (user) => {\r\n        formik.setValues(user)\r\n        setShow(true)\r\n    }\r\n\r\n    const remove = (id) => {\r\n        confirmAlert({\r\n            title: 'Remover Usuário',\r\n            message: 'Deseja excluir o usuário?',\r\n            buttons: [\r\n                {\r\n                    label: 'Não'\r\n                },\r\n                {\r\n                    label: 'Sim',\r\n                    onClick: () => {\r\n                        axios.delete(`${url}/${id}`)\r\n                            .then(() => {\r\n                                toast.success(\"Usuário Removido\");\r\n                                listUsers();\r\n                            })\r\n                            .catch(erro => {\r\n                                toast.error(erro)\r\n                            })\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h1>Gerenciamento de Usuários</h1>\r\n                        <br />\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Nome</th>\r\n                                    <th>Email</th>\r\n                                    <th>Telefone</th>\r\n                                    <th className=\"center\">\r\n                                        <Button onClick={handleShow} variant=\"primary\">Novo</Button>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    users?.map((user, index) => {\r\n                                        return (\r\n                                            <tr key={index}>\r\n                                                <td>{user.id}</td>\r\n                                                <td>{user.name}</td>\r\n                                                <td>{user.email}</td>\r\n                                                <td>{celularMask(user.phone)}</td>\r\n                                                <td className=\"center\">\r\n                                                    <Button variant=\"warning\" onClick={() => edit(user)}>Editar</Button>\r\n                                                    <Button variant=\"danger\" className=\"ml-20\" onClick={() => remove(user.id)}>Remover</Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Dados do Usuário</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Preencha as informações abaixo\r\n                    <br />\r\n                    <Form>\r\n                        <input\r\n                            type=\"hidden\"\r\n                            id=\"id\"\r\n                            name=\"id\"\r\n                            value={formik.values.id}\r\n                        />\r\n                        <input\r\n                            type=\"hidden\"\r\n                            id=\"createdAt\"\r\n                            name=\"createdAt\"\r\n                            value={formik.values.createdAt}\r\n                        />\r\n                        <Form.Group controlId=\"name\">\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.name} />\r\n                            {formik.touched.name && formik.errors.name ? (<div className=\"erro\">{formik.errors.name}</div>) : null}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control\r\n                                placeholder=\"name@example.com\"\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.email} />\r\n                            {formik.touched.email && formik.errors.email ? (<div className=\"erro\">{formik.errors.email}</div>) : null}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"phone\">\r\n                            <Form.Label>Telefone</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={celularMask(formik.values.phone)} />\r\n                            {formik.touched.phone && formik.errors.phone ? (<div className=\"erro\">{formik.errors.phone}</div>) : null}\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={formik.handleSubmit}>\r\n                        Salvar\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <ToastContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrudUsers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport CrudUsers from './pages/crud-usuarios';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CrudUsers />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}